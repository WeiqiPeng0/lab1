
#A1#
Dial() is similar to the connect() socket API.
They are similar that they both set up a connection from the client side. 

#A2#
Dial() would fail when there is connection error (ex. the server is not available) or that there is no permission/credentials, or the addr is incorrect.
I think the Unavailable code is suitable for most cases (ex. connection problem). Unavailable code is mostly used to denote that the service is currently unavailable. In practical
design, we might want to retry the connection request or use a backoff.

There are also other codes that match specific situations. For example, we tend to use PermissionDenied code when the caller has insufficient credentials.  If the address is wrong,
we might return a NotFound code. In addition, if the connection request times out, we shall return DeadlineExceeded.

#A3#
The system calls (on the server side) used here include read() and write(). read() can raise an error whenever the filedescriptor or address is invalid. In addition, if the data field is restricted then an error
should happen. write() can raise an error when the syscall itself is interrupted or the address is invalid.  

In addition, once the connections is built, the client service shall use syscalls such as send(), recv() to send and receive data package. Errors happen when connectionis down. 

Even if the network calls are successfully executed, the getUser() RPC can still return error. One possible situation is that the context passed into the RPC times out before the 
call finishes.  

#ExtraCredit1#
If the errors happen to be at the server side, it is necessary that the server properly handle the issues and return an error code or back-up solution as reply. The client analyzes the error
code returned from the remote service and produce error logs. For those error that happen to be at the caller side, errors are usually pre-defined and can be easily detected. For
instance, handling timeout in the caller is usually a necesary logic to be implemented.

#A4#
Using same conn for both VideoService and UserService is undesirable. The two services are on different server address/port. Using the worng address to build up the connection
shall direct the RPC reqeust to services that are not accountable for the calls and refuse them. Therefore, the caller cannot get valid responses. 


#A6#
This user has name Upton8063, their email is dimitribrown@sauer.name, and their profile URL is https://user-service.localhost/profile/202704

[0] Video id=1332, title="The muddy frog's kindness", author=Priscilla Cormier, url=https://video-data.localhost/blob/1332
[1] Video id=1269, title="quaint near", author=Helga Schowalter, url=https://video-data.localhost/blob/1269
[2] Video id=1262, title="uptight Crookneck", author=Elwyn Buckridge, url=https://video-data.localhost/blob/1262
[3] Video id=1061, title="elegant on", author=Jordi Mueller, url=https://video-data.localhost/blob/1061
[4] Video id=1352, title="The helpless cod's electricity", author=Omari Hane, url=https://video-data.localhost/blob/1352

#A8#
I think it depends. When we know in advance that queries to UserService or VideoService is sparse, then we can leverage the advantage of concurrency. Concurrency tends to be faster
in terms of the total overhead of RPC. However, if the RPC queries are intense to the Service, then spawning too many child queries might put pressure on the Service server.

For this project, I did not implement concurrency. Because I observe that serialized queries do not take too much time compared to other parts of the program. More importantly,
in practical scenarios the UserService and VideoService tend to receive very intense requests. This is in particular correct when we have large user base.

#ExtraCredit 2#
The strategy is to not exceed the batch size limit in order to get fast response. Optimizations can be made so that two queries can be combined in to one larger query if their sum is within the batch size. This
way we can reduce total query amounts. However, we have to implement extra logic to integrate the requests, keep track of the caller identities, and properly split and assign the respones. 


#B2#
Below is part of my stats:

1645602427121969        0       0       0       0       0       0.00    NaN     0
1645602428116265        0       0       0       0       0       0.00    NaN     0
1645602429117065        0       0       0       0       0       0.00    NaN     0
1645602430111030        0       0       0       0       0       0.00    NaN     0
1645602431122082        0       0       0       0       0       0.00    NaN     0
1645602432123809        0       0       0       0       0       0.00    NaN     0
1645602433122860        0       0       0       0       0       0.00    NaN     0
1645602434120835        0       0       0       0       0       0.00    NaN     0
1645602435117040        18      0       2       0       0       360.06  528.00  0
1645602436111200        28      0       1       0       0       307.70  528.00  0
1645602437123757        38      0       3       0       0       309.94  528.00  0
1645602438109967        48      0       5       0       0       329.09  528.00  0
1645602439123589        58      0       3       0       0       353.13  527.60  0
1645602440109475        68      0       5       0       0       358.25  526.96  0
1645602441110024        78      0       2       0       0       361.34  525.92  0
1645602442109686        88      0       4       0       0       360.77  525.28  0
1645602443123183        99      0       5       0       0       367.34  524.48  0
1645602444121599        109     0       5       0       0       373.40  523.68  0
1645602445121542        118     0       3       0       0       378.23  522.80  0
1645602446118002        128     0       4       0       0       377.79  522.08  0



#C1#
There are certain types of connection errors that should not be retried. For example, when the request is unauthorized (error 401) or the method is not allowed (error 405). 
Retrying regardless of those types of error is inefficient because we know apriori another try won't help for sure. 

#C2#
I would prefer setting a threshold below which we shall deliver the expired response. If the response has been outdated too much, it is inappropriate to display those recommendations to a user level. 

The tradeoff is that raising an error might have negative impact on user experience, while stale response won't effect the smoothness of the service, provided that the service is able to fully recover soon. 
The threshold should not be fixed. It could be a soft threshold according to user-oriented settings and feedbacks. For example, ask the user when they create account if they value more on fluency or quality of the service.

#C3#
We can somehow increase the RPC timeouts. We can also add more retries after a back-off period.

I might trade-off the RPC timeout time to wait for responses that are slow when the query load is high. Retries can be combined with distributed service providers, so that we send query to another service provider address.


#C4#
Establishment of connection is costly because it requires interaction between the caller and destination. It is known that setting up a TCP connections needs 3 turns between two sides. This is expensive compared to using an
existing one directly.

To reduce connections, one modification is to open up a connection when the server is built and store the connection in the field of the server instance. Therefore, we can reuse the connection every time the same server instance
is calling RPCs. 

However, constantly keeping a connection is probably inefficient if the channel is not used very often. 


